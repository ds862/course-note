package raft

//
// this is an outline of the API that raft must expose to
// the service (or tester). see comments below for
// each of these functions for more details.
//
// rf = Make(...)
//   create a new Raft server.
// rf.Start(command interface{}) (index, term, isleader)
//   start agreement on a new log entry
// rf.GetState() (term, isLeader)
//   ask a Raft for its current term, and whether it thinks it is leader
// ApplyMsg
//   each time a new entry is committed to the log, each Raft peer
//   should send an ApplyMsg to the service (or tester)
//   in the same server.
//

import (
	"labrpc"
	"math/rand"
	"sync"
	"time"
)

// import "bytes"
// import "labgob"



//
// as each Raft peer becomes aware that successive log entries are
// committed, the peer should send an ApplyMsg to the service (or
// tester) on the same server, via the applyCh passed to Make(). set
// CommandValid to true to indicate that the ApplyMsg contains a newly
// committed log entry.
//
// in Lab 3 you'll want to send other kinds of messages (e.g.,
// snapshots) on the applyCh; at that point you can add fields to
// ApplyMsg, but set CommandValid to false for these other uses.
//
type ApplyMsg struct {
	CommandValid bool
	Command      interface{}
	CommandIndex int
}

// log entry struct, because AppendEntriesArgs includs []LogEntry,
// so field names must start with capital letters!
type LogEntry struct {
	Command		interface{}		// each entry contains command for state machine,
	Term 		int				// and term when entry was received by leader(fisrt index is 1)
}

// the state of servers
const (
	Follower	int = 0
	Candidate		= 1
	Leader			= 2
)

//
// A Go object implementing a single Raft peer.
//
type Raft struct {
	mu        sync.Mutex          // Lock to protect shared access to this peer's state
	peers     []*labrpc.ClientEnd // RPC end points of all peers
	persister *Persister          // Object to hold this peer's persisted state
	me        int                 // this peer's index into peers[]

	// Your data here (2A, 2B, 2C).
	// Look at the paper's Figure 2 for a description of what
	// state a Raft server must maintain.

	state 		int				// state of server(Follower, Candidate and Leader)
	leaderId	int				// so follower can redirect clients

	leaderCond	*sync.Cond		// singal for hearbeatPeriodTick routine when the peer becomes the leader
	nonLeaderCond 	*sync.Cond	// signal for electionTimeoutTick routine when the peer abdicates the the leader

	electionTimeout	int			// election timout(heartbeat timeout)
	heartbeatPeriod	int			// the period to issue heartbeat RPCs

	latestIssueTime	int64		// 最新的leader发送心跳的时间
	latestHeardTime	int64		// 最新的收到leader的AppendEntries RPC(包括heartbeat)
								// 或给予candidate的RequestVote RPC投票的时间

	electionTimeoutChan	chan bool	// 写入electionTimeoutChan意味着可以发起一次选举
	heartbeatPeriodChan	chan bool	// 写入heartbeatPeriodChan意味leader需要向其他peers发送一次心跳

	// Persistent state on all server
	currentTerm	int				// latest term server has seen(initialized to 0 on fisrt boot,
								// increases monotonically)
	voteFor		int				// candidateId that received vote in current term(or null if none)
	log			[]LogEntry		// log entries

	// Volatile state on all server
	commitIndex	int				// index of highest log entry known to be committed(initialized to 0,
								// increase monotonically)
	lastApplied	int				// index of highest log entry applied to state machine(initialized to 0,
								// increase monotonically)

	// Volatile state on candidate
	nVotes		int				// total num votes that the peer has got

	// Volatile state on leaders
	nextIndex	[]int			// for each server, index of the next log entry to send to that server
								// (initialized to leader last log index + 1)
	matchIndex	[]int			// for each server, index of highest log entry known to be replicated on
								// server(initialized to 0, increases monotonically)

}

// return currentTerm and whether this server
// believes it is the leader.
func (rf *Raft) GetState() (int, bool) {

	var term int
	var isleader bool
	// Your code here (2A).
	rf.mu.Lock()
	term = rf.currentTerm
	if rf.state == Leader {
		isleader = true
	} else {
		isleader = false
	}
	rf.mu.Unlock()

	return term, isleader
}


//
// save Raft's persistent state to stable storage,
// where it can later be retrieved after a crash and restart.
// see paper's Figure 2 for a description of what should be persistent.
//
func (rf *Raft) persist() {
	// Your code here (2C).
	// Example:
	// w := new(bytes.Buffer)
	// e := labgob.NewEncoder(w)
	// e.Encode(rf.xxx)
	// e.Encode(rf.yyy)
	// data := w.Bytes()
	// rf.persister.SaveRaftState(data)
}


//
// restore previously persisted state.
//
func (rf *Raft) readPersist(data []byte) {
	if data == nil || len(data) < 1 { // bootstrap without any state?
		return
	}
	// Your code here (2C).
	// Example:
	// r := bytes.NewBuffer(data)
	// d := labgob.NewDecoder(r)
	// var xxx
	// var yyy
	// if d.Decode(&xxx) != nil ||
	//    d.Decode(&yyy) != nil {
	//   error...
	// } else {
	//   rf.xxx = xxx
	//   rf.yyy = yyy
	// }
}

// field names must start with capital letters!
type AppendEntriesArgs struct {
	Term 			int			// leader's term
	LeaderId		int			// so follower can redirect clients
	PrevLogIndex	int			// index of log entry immediately preceding new ones
	PrevLogTerm		int			// term of PrevLogIndex entry
	Entries			[]LogEntry	// log entries to store(empty for heartbeat; may send
								// more than one for efficiency)
	LeaderCommit	int			// leader's commitIndex
}

type AppendEntriesReply struct {
	Term 			int			// currentTerm, for leader to update itself
	Success			bool		// true if follower contained entry matching
								// prevLogIndex and prevLogTerm
}

func (rf *Raft) AppendEntries(args *AppendEntriesArgs, reply *AppendEntriesReply) {
	rf.mu.Lock()
	defer rf.mu.Unlock()

	// Reply false if term < currentTerm, otherwise continue a "consistency check"
	if rf.currentTerm <= args.Term {

		// If RPC request or response contains term T > currentTerm:
		// set currentTerm = T, convert to follower
		if rf.currentTerm < args.Term {
			DPrintf("[AppendEntries]: Id %d Term %d State %s\t||\targs's term %d is old\n",
							rf.me, rf.currentTerm, state2name(rf.state), args.Term)
			rf.currentTerm = args.Term

			// 收到来自leader的args.Term大于peer自身的currentTerm的AppendEntries RPC时，表明
			// 目前存在leader且自己的任期是过时的，所以需要切换到follower状态，重置选举超时。
			rf.resetElectionTimer()

			// if a candidate or leader discovers that its term is out of date, it
			// immediately revert to follower state
			if rf.state == Leader {
				rf.state = Follower
				rf.voteFor = -1
				rf.nonLeaderCond.Broadcast()
				return
			} else if rf.state == Candidate {
				rf.voteFor = -1
				rf.state = Follower
				return
			}
		}

		if len(rf.log) <= args.PrevLogIndex {
			DPrintf("[AppendEntries]: Id %d Term %d State %s\t||\tinvalid log's len %d\n",
								rf.me, rf.currentTerm, state2name(rf.state), len(rf.log))
		}
		// if the consistency check pass
		if len(rf.log) > args.PrevLogIndex &&
			rf.log[args.PrevLogIndex].Term == args.PrevLogTerm {

			rf.log = append(rf.log[:args.PrevLogIndex+1], args.Entries...)
			if args.LeaderCommit > rf.commitIndex {
				rf.commitIndex = args.LeaderCommit
				if rf.commitIndex > len(rf.log) - 1 {
					rf.commitIndex = len(rf.log) - 1
				}
			}
			DPrintf("[AppendEntries]: Id %d Term %d State %s\t||\tconsistency check pass" +
				" with args's prevLogIndex %d args's prevLogTerm %d\n", rf.me, rf.currentTerm, state2name(rf.state),
													args.PrevLogIndex, args.PrevLogTerm)
			// Reset timeout when received leader's AppendEntries RPC
			rf.resetElectionTimer()
			// 接收到leader的心跳，就可以将投票时用于记录授予投票voteFor清零
			if rf.voteFor != -1 {
				rf.voteFor = -1
			}

			reply.Term = rf.currentTerm
			reply.Success = true
			return
		} else {
			DPrintf("[AppendEntries]: Id %d Term %d State %s\t||\tconsistency check failed" +
				" with args's prevLogIndex %d args's prevLogTerm %d while it's prevLogTerm %s in" +
				" prevLogIndex %d\n", rf.me, rf.currentTerm, state2name(rf.state),
				args.PrevLogIndex, args.PrevLogTerm, rf.log[args.PrevLogIndex].Term, args.PrevLogIndex)
		}
	}

	reply.Term = rf.currentTerm
	reply.Success = false
}

func (rf *Raft) sendAppendEntires(server int, args *AppendEntriesArgs, reply *AppendEntriesReply) bool {
	ok := rf.peers[server].Call("Raft.AppendEntries", args, reply)
	return ok
}


//
// example RequestVote RPC arguments structure.
// field names must start with capital letters!
//
type RequestVoteArgs struct {
	// Your data here (2A, 2B).
	Term 			int			// candidate's term
	CandidateId		int			// candidate requesting vote
	LastLogIndex	int			// index of candidate's last log entry($5.4)
	LastLogTerm		int			// term of candidate's last log entry($5.4)
}

//
// example RequestVote RPC reply structure.
// field names must start with capital letters!
//
type RequestVoteReply struct {
	// Your data here (2A).
	Term 			int			// currentTerm, for candidate to update itself
	VoteGranted		bool		// true means candidate received vote
}

//
// example RequestVote RPC handler.
//
func (rf *Raft) RequestVote(args *RequestVoteArgs, reply *RequestVoteReply) {
	// Your code here (2A, 2B).

	rf.mu.Lock()
	defer rf.mu.Unlock()

	// Reply fasle if term < currentTerm, otherwise continue a "voting process"
	if rf.currentTerm <= args.Term {

		// if one server's current term is smaller than other's, then it updates
		// it current term to the larger value
		if rf.currentTerm < args.Term {
			DPrintf("[RequestVote]: Id %d Term %d State %s\t||\targs's term %d is larger\n",
									rf.me, rf.currentTerm, state2name(rf.state), args.Term)
			rf.currentTerm = args.Term

			// if a candidate or leader discovers that its term is out of date, it
			// immediately revert to follower state
			if rf.state == Leader {
				rf.state = Follower
				rf.voteFor = -1
				rf.nonLeaderCond.Broadcast()
				return
			} else if rf.state == Candidate {
				rf.state = Follower
				rf.voteFor = -1
				return
			}
		}

		// voteFor is null or candidateId
		if rf.voteFor == -1 || rf.voteFor == args.CandidateId {

			// determine which of two log is more "up-to-date" by comparing
			// the index and term of the last entries in the logs
			lastLogIndex := len(rf.log) - 1
			if lastLogIndex < 0 {
				DPrintf("[RequestVote]: Id %d Term %d State %s\t||\tinvalid lastLogIndex: %d\n",
									rf.me, rf.currentTerm, state2name(rf.state), lastLogIndex)
			}
			lastLogTerm := rf.log[lastLogIndex].Term

			// if the logs have last entries with different terms, then the log
			// with the later term is more up-to-date
			if lastLogTerm < args.LastLogTerm {		// candidate is more up-to-date
				reply.Term = rf.currentTerm
				reply.VoteGranted = true
				rf.voteFor = args.CandidateId
				// reset election tiemout
				rf.resetElectionTimer()
				DPrintf("[RequestVote]: Id %d Term %d State %s\t||\tgrant vote for candidate %d\n",
								rf.me, rf.currentTerm, state2name(rf.state), args.CandidateId)
				return
			}

			// if the logs end with the same term, then whichever log is longer
			// is more up-to-date
			if lastLogTerm == args.LastLogTerm && lastLogIndex <= args.LastLogIndex {
				reply.Term = rf.currentTerm
				reply.VoteGranted = true
				rf.voteFor = args.CandidateId
				// reset election timeout
				rf.resetElectionTimer()
				DPrintf("[RequestVote]: Id %d Term %d State %s\t||\tgrant vote for candidate %d\n",
					rf.me, rf.currentTerm, state2name(rf.state), args.CandidateId)
				return
			}
		}
	}
	reply.Term = rf.currentTerm
	reply.VoteGranted = false
}

//
// example code to send a RequestVote RPC to a server.
// server is the index of the target server in rf.peers[].
// expects RPC arguments in args.
// fills in *reply with RPC reply, so caller should
// pass &reply.
// the types of the args and reply passed to Call() must be
// the same as the types of the arguments declared in the
// handler function (including whether they are pointers).
//
// The labrpc package simulates a lossy network, in which servers
// may be unreachable, and in which requests and replies may be lost.
// Call() sends a request and waits for a reply. If a reply arrives
// within a timeout interval, Call() returns true; otherwise
// Call() returns false. Thus Call() may not return for a while.
// A false return can be caused by a dead server, a live server that
// can't be reached, a lost request, or a lost reply.
//
// Call() is guaranteed to return (perhaps after a delay) *except* if the
// handler function on the server side does not return.  Thus there
// is no need to implement your own timeouts around Call().
//
// look at the comments in ../labrpc/labrpc.go for more details.
//
// if you're having trouble getting RPC to work, check that you've
// capitalized all field names in structs passed over RPC, and
// that the caller passes the address of the reply struct with &, not
// the struct itself.
//
func (rf *Raft) sendRequestVote(server int, args *RequestVoteArgs, reply *RequestVoteReply) bool {
	ok := rf.peers[server].Call("Raft.RequestVote", args, reply)
	return ok
}


//
// the service using Raft (e.g. a k/v server) wants to start
// agreement on the next command to be appended to Raft's log. if this
// server isn't the leader, returns false. otherwise start the
// agreement and return immediately. there is no guarantee that this
// command will ever be committed to the Raft log, since the leader
// may fail or lose an election. even if the Raft instance has been killed,
// this function should return gracefully.
//
// the first return value is the index that the command will appear at
// if it's ever committed. the second return value is the current
// term. the third return value is true if this server believes it is
// the leader.
//
func (rf *Raft) Start(command interface{}) (int, int, bool) {
	index := -1
	term := -1
	isLeader := true

	// Your code here (2B).


	return index, term, isLeader
}

//
// the tester calls Kill() when a Raft instance won't
// be needed again. you are not required to do anything
// in Kill(), but it might be convenient to (for example)
// turn off debug output from this instance.
//
func (rf *Raft) Kill() {
	// Your code here, if desired.
}


func state2name(state int) string {
	var name string
	if state == Follower {
		name = "Follower"
	} else if state == Candidate {
		name = "Candidate"
	} else if state == Leader {
		name = "Leader"
	}
	return name
}

// 选举超时(心跳超时)检查器，定期检查自最新一次从leader那里收到AppendEntries RPC(包括heartbeat)
// 或给予candidate的RequestVote RPC请求的投票的时间(latestHeardTIme)以来的时间差，是否超过了
// 选举超时时间(electionTimeout)。若超时，则往electionTimeoutChan写入数据，以表明可以发起选举。
func (rf *Raft) electionTimeoutTick() {
	for {
		// 如果peer是leader，则不需要选举超时检查器，所以等待nonLeaderCond条件变量
		if term, isLeader := rf.GetState(); isLeader {
			rf.mu.Lock()
			rf.nonLeaderCond.Wait()
			rf.mu.Unlock()
		} else {
			rf.mu.Lock()
			elapseTime := time.Now().UnixNano() - rf.latestHeardTime
			if int(elapseTime/int64(time.Millisecond)) >= rf.electionTimeout {
				DPrintf("[ElectionTimeoutTick]: Id %d Term %d State %s\t||\ttimeout," +
						" convert to Candidate\n", rf.me, term, state2name(rf.state))
				// 选举超时，peer的状态只能是follower或candidate两种状态。
				// 若是follower需要转换为candidate发起选举； 若是candidate
				// 需要发起一次新的选举。所以这里设置状态为Candidate。
				rf.state = Candidate
				rf.electionTimeoutChan <- true
			}
			rf.mu.Unlock()
			// 休眠1ms，作为tick的时间间隔
			time.Sleep(time.Millisecond)
		}
	}
}

// 心跳发送周期检查器。leader检查距离上次发送心跳的时间(latestIssueTime)是否超过了心跳周期(heartbeatPeriod)，
// 若超过则写入数据到heartbeatPeriodChan，以通知发送心跳
func (rf *Raft) heartbeatPeriodTick() {
	for {
		// 如果peer不是leader，则等待leaderCond条件变量
		if term, isLeader := rf.GetState(); isLeader == false {
			rf.mu.Lock()
			rf.leaderCond.Wait()
			rf.mu.Unlock()
		} else {
			rf.mu.Lock()
			elapseTime := time.Now().UnixNano() - rf.latestIssueTime
			if int(elapseTime/int64(time.Millisecond)) >= rf.heartbeatPeriod {
				DPrintf("[HeartbeatPeriodTick]: Id %d Term %d State %s\t||\theartbeat period elapsed," +
					" issue heartbeat\n", rf.me, term, state2name(rf.state))
				rf.heartbeatPeriodChan <- true
			}
			rf.mu.Unlock()
			// 休眠1ms作为tick的时间间隔
			time.Sleep(time.Millisecond)
		}
	}
}

// 消息处理主循环，处理两种互斥的时间驱动的时间到期：
// 1) 心跳周期到期； 2) 选举超时； 以及RPC消息处理中的反映到通道条件的处理。
func (rf *Raft) eventLoop() {
	for {
		select {
		case <- rf.electionTimeoutChan:
			rf.mu.Lock()
			DPrintf("[EventLoop]: Id %d Term %d State %s\t||\telection timeout, start an election\n",
									rf.me, rf.currentTerm, state2name(rf.state))
			rf.mu.Unlock()
			go rf.startElection()
		case <- rf.heartbeatPeriodChan:
			rf.mu.Lock()
			DPrintf("[EventLoop]: Id %d Term %d State %s\t||\theartbeat period occurs, broadcast heartbeats\n",
								rf.me, rf.currentTerm, state2name(rf.state))
			rf.mu.Unlock()
			go rf.broadcastHeartbeat()
		}
	}
}

// leader给其他peers广播一次心跳
func (rf *Raft) broadcastHeartbeat() {

	rf.mu.Lock()
	rf.latestIssueTime = time.Now().UnixNano()
	rf.mu.Unlock()

	for i, _ := range rf.peers {
		if i == rf.me {
			continue
		}

		go func(i int, rf *Raft) {

			rf.mu.Lock()
			prevLogIndex := rf.nextIndex[i] - 1
			if prevLogIndex < 0 {
				DPrintf("[Broadcast]: Id %d Term %d State %s\t||\tinvalid prevLogIndex %d for peer %d\n",
									rf.me, rf.currentTerm, state2name(rf.state), prevLogIndex, i)
			}
			prevLogTerm := rf.log[prevLogIndex].Term
			entries := rf.log[prevLogIndex+1:]
			args := AppendEntriesArgs{Term:rf.currentTerm, LeaderId:rf.me,
				PrevLogIndex:prevLogIndex, PrevLogTerm:prevLogTerm,
				Entries:entries, LeaderCommit:rf.commitIndex}
			DPrintf("[Broadcast]: Id %d Term %d State %s\t||\tissue heartbeat to peer %d" +
				" with nextIndex %d\n", rf.me, rf.currentTerm, state2name(rf.state), i, prevLogIndex+1)
			rf.mu.Unlock()
			var reply AppendEntriesReply

			ok := rf.sendAppendEntires(i, &args, &reply)

			// 心跳发送失败，表明无法和peer建立通信，直接退出
			if ok == false {
				rf.mu.Lock()
				DPrintf("[Broadcast]: Id %d Term %d State %s\t||\tissue heartbeat to peer %d failed\n",
											rf.me, rf.currentTerm, state2name(rf.state), i)
				rf.mu.Unlock()
				return
			}

			// heartbeat被拒绝，原因可能是leader任期过时，或者一致性检查没有通过(由于heartbeat不携带日志条目，
			// 应该没有可能出现这种情况)。
			if reply.Success == false {
				rf.mu.Lock()
				defer rf.mu.Unlock()
				DPrintf("[Broadcast]: Id %d Term %d State %s\t||\theartbeat is rejected by peer %d\n",
										rf.me, rf.currentTerm, state2name(rf.state), i)
				// leader任期过时，需要切换到follower
				if rf.currentTerm < reply.Term {
					// If RPC request or response contains term T > currentTerm, set currentTerm = T,
					// convert to follower
					rf.currentTerm = reply.Term
					rf.state = Follower
					rf.voteFor = -1
					rf.nonLeaderCond.Broadcast()
					return
				}
			}

			// 心跳发送成功
			rf.mu.Lock()
			DPrintf("[Broadcast]: Id %d Term %d State %s\t||\tsend heartbeat to peer %d success\n",
								rf.me, rf.currentTerm, state2name(rf.state), i)
			rf.mu.Unlock()

		}(i, rf)
	}
}


// 重置election timer，不加锁
func (rf *Raft) resetElectionTimer() {
	// 随机化种子以产生不同的伪随机数序列
	rand.Seed(time.Now().UnixNano())
	// 重新选举随机的eletionTimeout
	rf.electionTimeout = rf.heartbeatPeriod * 2 + rand.Intn(300 - 150)
	// 因为重置了选举超时，所以也需要更新latestHeardTime
	rf.latestHeardTime = time.Now().UnixNano()
}

// 发起一次选举，在一个新的goroutine中并行给其他每个peers发送RequestVote RPC，并等待
// 所有发起RequestVote的goroutine结束，统计投票结果。
func (rf *Raft) startElection() {
	rf.mu.Lock()
	// start election:
	// 	1. increase currentTerm
	rf.currentTerm += 1
	//  2. vote for self
	rf.voteFor = rf.me
	nVotes := 1
	// 	3. reset election timeout
	rf.resetElectionTimer()
	DPrintf("[StartElection]: Id %d Term %d State %s\t||\tstart an election\n",
		rf.me, rf.currentTerm, state2name(rf.state))
	rf.mu.Unlock()

	// 	4. send RequestVote RPCs to all other servers in parallel
	// 创建一个goroutine来并行给其他peers发送RequestVote RPC并统计投票结果
	go func(nVotes *int, rf *Raft) {
		var wg sync.WaitGroup
		winThreshold := len(rf.peers)/2 + 1

		for i, _ := range rf.peers {
			// 跳过发起投票的candidate本身
			if i == rf.me {
				continue
			}

			rf.mu.Lock()
			wg.Add(1)
			lastLogIndex := len(rf.log) - 1
			if lastLogIndex < 0 {
				DPrintf("[StartElection]: Id %d Term %d State %s\t||\tinvalid lastLogIndex %d\n",
									rf.me, rf.currentTerm, state2name(rf.state), lastLogIndex)
			}
			args := RequestVoteArgs{Term: rf.currentTerm, CandidateId: rf.me,
				LastLogIndex: lastLogIndex, LastLogTerm: rf.log[lastLogIndex].Term}
			DPrintf("[StartElection]: Id %d Term %d State %s\t||\tissue RequestVote RPC"+
				" to peer %d\n", rf.me, rf.currentTerm, state2name(rf.state), i)
			rf.mu.Unlock()
			var reply RequestVoteReply

			// 使用goroutine单独给每个peer发起RequestVote RPC
			go func(i int, rf *Raft, args *RequestVoteArgs, reply *RequestVoteReply) {
				defer wg.Done()

				ok := rf.sendRequestVote(i, args, reply)

				// 发送RequestVote请求失败
				if ok == false {
					rf.mu.Lock()
					DPrintf("[StartElection]: Id %d Term %d State %s\t||\tsend RequestVote"+
						" Request to peer %d failed\n", rf.me, rf.currentTerm, state2name(rf.state), i)
					rf.mu.Unlock()
					return
				}

				// 请求发送成功，查看RequestVote投票结果
				// 拒绝投票的原因有很多，可能是任期较小，或者log不是"up-to-date"
				if reply.VoteGranted == false {

					rf.mu.Lock()
					defer rf.mu.Unlock()
					DPrintf("[StartElection]: Id %d Term %d State %s\t||\tRequestVote is"+
						" rejected by peer %d\n", rf.me, rf.currentTerm, state2name(rf.state), i)

					// If RPC request or response contains T > currentTerm, set currentTerm = T,
					// convert to follower
					if rf.currentTerm < reply.Term {
						DPrintf("[StartElection]: Id %d Term %d State %s\t||\tless than"+
							" peer %d Term %d\n", rf.me, rf.currentTerm, state2name(rf.state), i, reply.Term)
						rf.currentTerm = reply.Term
						rf.state = Follower
						rf.voteFor = -1
						return
					}

				}

				// 获得了peer的投票
				rf.mu.Lock()
				DPrintf("[StartElection]: Id %d Term %d State %s\t||\tpeer %d grants vote\n",
					rf.me, rf.currentTerm, state2name(rf.state), i)
				*nVotes += 1
				DPrintf("[StartElection]: Id %d Term %d State %s\t||\tnVotes %d\n",
					rf.me, rf.currentTerm, state2name(rf.state), *nVotes)
				// 如果已经获得了多数投票
				if rf.state != Leader && *nVotes >= winThreshold {
					// Todo:
					DPrintf("[StartElection]: Id %d Term %d State %s\t||\twin election with nVotes %d\n",
						rf.me, rf.currentTerm, state2name(rf.state), *nVotes)
					rf.state = Leader
					rf.leaderCond.Broadcast()

					// leader启动时初始化所有的nextIndex为其log的尾后位置
					for i := 0; i < len(rf.peers); i++ {
						rf.nextIndex[i] = len(rf.log)
					}
					//// 立即写入heartbeatPeriodChan，表明领导者需要立即发送心跳
					//rf.heartbeatPeriodChan <- true
					go rf.broadcastHeartbeat()
				}
				rf.mu.Unlock()
			}(i, rf, &args, &reply)
		}

		wg.Wait()

	}(&nVotes, rf)
}

//
// the service or tester wants to create a Raft server. the ports
// of all the Raft servers (including this one) are in peers[]. this
// server's port is peers[me]. all the servers' peers[] arrays
// have the same order. persister is a place for this server to
// save its persistent state, and also initially holds the most
// recent saved state, if any. applyCh is a channel on which the
// tester or service expects Raft to send ApplyMsg messages.
// Make() must return quickly, so it should start goroutines
// for any long-running work.
//
func Make(peers []*labrpc.ClientEnd, me int,
	persister *Persister, applyCh chan ApplyMsg) *Raft {
	rf := &Raft{}
	rf.peers = peers
	rf.persister = persister
	rf.me = me

	// Your initialization code here (2A, 2B, 2C).

	// 调用Make()时是创建该Raft实例，此时该实例没有并发的goroutines，无需加锁
	// Part 2A
	rf.state = Follower
	rf.leaderId = -1
	rf.leaderCond = sync.NewCond(&rf.mu)
	rf.nonLeaderCond = sync.NewCond(&rf.mu)
	rf.heartbeatPeriod = 100	// 因为要求leader每秒发送的心跳RPCs不能超过10次，
								// 这里心跳周期取最大值100ms
	rf.resetElectionTimer()
	rf.electionTimeoutChan = make(chan bool)
	rf.heartbeatPeriodChan = make(chan bool)

	// initialized to 0 on first boot, increases monotonically
	rf.currentTerm = 0
	rf.voteFor = -1		// -1意味着没有给任何peer投票

	rf.commitIndex = 0
	rf.lastApplied = 0

	// each entry of log contains command for state machine, and term
	// when entry was received by leader(**fisrt index is 1**)
	// 也就是说，log中第0个元素不算有效entry，合法entry从下标1计算。
	rf.log = make([]LogEntry, 0)
	rf.log = append(rf.log, LogEntry{Term:0})

	// 初始化nextIndex[]和matchIndex[]的大小
	size := len(rf.peers)
	rf.nextIndex = make([]int, size)
	// matchIndex元素的默认初始值即为0
	rf.matchIndex = make([]int, size)

	go rf.electionTimeoutTick()
	go rf.heartbeatPeriodTick()
	go rf.eventLoop()

	// initialize from state persisted before a crash
	rf.readPersist(persister.ReadRaftState())


	return rf
}