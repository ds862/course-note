package raft

//
// this is an outline of the API that raft must expose to
// the service (or tester). see comments below for
// each of these functions for more details.
//
// rf = Make(...)
//   create a new Raft server.
// rf.Start(command interface{}) (index, term, isleader)
//   start agreement on a new log entry
// rf.GetState() (term, isLeader)
//   ask a Raft for its current term, and whether it thinks it is leader
// ApplyMsg
//   each time a new entry is committed to the log, each Raft peer
//   should send an ApplyMsg to the service (or tester)
//   in the same server.
//

import (
	"labrpc"
	"log"
	"math/rand"
	"sync"
	"time"
)

// import "bytes"
// import "labgob"



//
// as each Raft peer becomes aware that successive log entries are
// committed, the peer should send an ApplyMsg to the service (or
// tester) on the same server, via the applyCh passed to Make(). set
// CommandValid to true to indicate that the ApplyMsg contains a newly
// committed log entry.
//
// in Lab 3 you'll want to send other kinds of messages (e.g.,
// snapshots) on the applyCh; at that point you can add fields to
// ApplyMsg, but set CommandValid to false for these other uses.
//
type ApplyMsg struct {
	CommandValid bool
	Command      interface{}
	CommandIndex int
}

// log entry struct, because AppendEntriesArgs includs []LogEntry,
// so field names must start with capital letters!
type LogEntry struct {
	Command		interface{}		// each entry contains command for state machine,
	Term 		int				// and term when entry was received by leader(fisrt index is 1)
}

// the state of servers
const (
	Follower	int = 0
	Candidate		= 1
	Leader			= 2
)

//
// A Go object implementing a single Raft peer.
//
type Raft struct {
	mu        sync.Mutex          // Lock to protect shared access to this peer's state
	peers     []*labrpc.ClientEnd // RPC end points of all peers
	persister *Persister          // Object to hold this peer's persisted state
	me        int                 // this peer's index into peers[]

	// Your data here (2A, 2B, 2C).
	// Look at the paper's Figure 2 for a description of what
	// state a Raft server must maintain.

	state 		int				// state of server(Follower, Candidate and Leader)
	transition 	chan bool		// write true on this channel that indicates the peer nend to state transition
	done 		chan struct{}	// close this channel to send exit signal for it's all goroutine
	wg 			*sync.WaitGroup	// waiting when state transition
	exit 		chan struct{}	// the record of previous state exit
	// Persistent state on all server
	currentTerm	int				// latest term server has seen(initialized to 0 on fisrt boot,
	// increases monotonically)
	voteFor		int				// candidateId that received vote in current term(or null if none)
	log			[]LogEntry		// log entries

	// Volatile state on all server
	commitIndex	int				// index of highest log entry known to be committed(initialized to 0,
	// increase monotonically)
	lastApplied	int				// index of highest log entry applied to state machine(initialized to 0,
	// increase monotonically)
	timeout		int				// election timeout

	// Volatitle state on follower
	lastHeard	int64			// the last time at which the peer heard from the leader

	// Volatile state on candidate
	nVotes		int				// total num votes that the peer has got

	// Volatile state on leaders
	nextIndex	[]int			// for each server, index of the next log entry to send to that server
	// (initialized to leader last log index + 1)
	matchIndex	[]int			// for each server, index of highest log entry known to be replicated on
	// server(initialized to 0, increases monotonically)

}

// return currentTerm and whether this server
// believes it is the leader.
func (rf *Raft) GetState() (int, bool) {

	var term int
	var isleader bool
	// Your code here (2A).
	return term, isleader
}


//
// save Raft's persistent state to stable storage,
// where it can later be retrieved after a crash and restart.
// see paper's Figure 2 for a description of what should be persistent.
//
func (rf *Raft) persist() {
	// Your code here (2C).
	// Example:
	// w := new(bytes.Buffer)
	// e := labgob.NewEncoder(w)
	// e.Encode(rf.xxx)
	// e.Encode(rf.yyy)
	// data := w.Bytes()
	// rf.persister.SaveRaftState(data)
}


//
// restore previously persisted state.
//
func (rf *Raft) readPersist(data []byte) {
	if data == nil || len(data) < 1 { // bootstrap without any state?
		return
	}
	// Your code here (2C).
	// Example:
	// r := bytes.NewBuffer(data)
	// d := labgob.NewDecoder(r)
	// var xxx
	// var yyy
	// if d.Decode(&xxx) != nil ||
	//    d.Decode(&yyy) != nil {
	//   error...
	// } else {
	//   rf.xxx = xxx
	//   rf.yyy = yyy
	// }
}

// field names must start with capital letters!
type AppendEntriesArgs struct {
	Term 			int			// leader's term
	LeaderId		int			// so follower can redirect clients
	PrevLogIndex	int			// index of log entry immediately preceding new ones
	PrevLogTerm		int			// term of PrevLogIndex entry
	Entries			[]LogEntry	// log entries to store(empty for heartbeat; may send
	// more than one for efficiency)
	LeaderCommit	int			// leader's commitIndex
}

type AppendEntriesReply struct {
	Term 			int			// currentTerm, for leader to update itself
	Success			bool		// true if follower contained entry matching
	// prevLogIndex and prevLogTerm
}

func (rf *Raft) AppendEntries(args *AppendEntriesArgs, reply *AppendEntriesReply) {
	rf.mu.Lock()

	// Reply false if term < currentTerm, otherwise continue a "consistency check"
	if rf.currentTerm <= args.Term {

		// If RPC request or response contains term T > currentTerm:
		// set currentTerm = T, convert to follower
		if rf.currentTerm < args.Term {
			rf.currentTerm = args.Term
			// if a candidate or leader discovers that its term is out of date, it
			// immediately revert to follower state
			if rf.state == Leader || rf.state == Candidate {
				rf.mu.Unlock()
				rf.transition <- true
				go rf.follower()
				return
			}
		}

		// if the consistency check pass
		//DPrintf("[AppendEntries]: peer %d log len %d, args.PrevLogIndex %d\n", rf.me, len(rf.log), args.PrevLogIndex)
		if rf.log[args.PrevLogIndex].Term == args.PrevLogTerm {
			//rf.log = append(rf.log[:args.PrevLogIndex], args.Entries...)
			//if args.LeaderCommit > rf.commitIndex {
			//	rf.commitIndex = args.LeaderCommit
			//	if rf.commitIndex > len(rf.log) - 1 {
			//		rf.commitIndex = len(rf.log) - 1
			//	}
			//}
			// Reset timeout when received leader's AppendEntries RPC
			rf.resetTimeout()

			rf.mu.Unlock()
			reply.Term = rf.currentTerm
			reply.Success = true
			return
		}
	}
	reply.Term = rf.currentTerm
	reply.Success = false
	rf.mu.Unlock()
}

func (rf *Raft) sendAppendEntires(server int, args *AppendEntriesArgs, reply *AppendEntriesReply) bool {
	ok := rf.peers[server].Call("Raft.AppendEntries", args, reply)
	return ok
}


//
// example RequestVote RPC arguments structure.
// field names must start with capital letters!
//
type RequestVoteArgs struct {
	// Your data here (2A, 2B).
	Term 			int			// candidate's term
	CandidateId		int			// candidate requesting vote
	LastLogIndex	int			// index of candidate's last log entry($5.4)
	LastLogTerm		int			// term of candidate's last log entry($5.4)
}

//
// example RequestVote RPC reply structure.
// field names must start with capital letters!
//
type RequestVoteReply struct {
	// Your data here (2A).
	Term 			int			// currentTerm, for candidate to update itself
	VoteGranted		bool		// true means candidate received vote
}

//
// example RequestVote RPC handler.
//
func (rf *Raft) RequestVote(args *RequestVoteArgs, reply *RequestVoteReply) {
	// Your code here (2A, 2B).

	rf.mu.Lock()

	// Reply fasle if term < currentTerm, otherwise continue a "voting process"
	if rf.currentTerm <= args.Term {

		// if one server's current term is smaller than other's, then it updates
		// it current term to the larger value
		if rf.currentTerm < args.Term {

			rf.currentTerm = args.Term

			// if a candidate or leader discovers that its term is out of date, it
			// immediately revert to follower state
			if rf.state == Leader || rf.state == Candidate {
				rf.mu.Unlock()
				rf.transition <- true
				go rf.follower()
				return
			}
		}

		// voteFor is null or candidateId
		if rf.voteFor == -1 || rf.voteFor == args.CandidateId {

			// determine which of two log is more "up-to-date" by comparing
			// the index and term of the last entries in the logs
			lastLogIndex := len(rf.log) - 1
			lastLogTerm := rf.log[lastLogIndex].Term

			// if the logs have last entries with different terms, then the log
			// with the later term is more up-to-date
			if lastLogTerm < args.LastLogTerm {		// candidate is more up-to-date
				reply.Term = rf.currentTerm
				reply.VoteGranted = true
				rf.voteFor = args.CandidateId
				// reset election tiemout
				rf.resetTimeout()
				DPrintf("[RequestVote]: peer %d grant vote for candidate %d\n", rf.me, args.CandidateId)
				rf.mu.Unlock()
				return
			}

			// if the logs end with the same term, then whichever log is longer
			// is more up-to-date
			if lastLogTerm == args.LastLogTerm && lastLogIndex <= args.LastLogIndex {
				reply.Term = rf.currentTerm
				reply.VoteGranted = true
				rf.voteFor = args.CandidateId
				// reset election timeout
				rf.resetTimeout()
				DPrintf("[RequestVote]: peer %d grant vote for candidate %d\n", rf.me, args.CandidateId)
				rf.mu.Unlock()
				return
			}
		}
	}
	reply.Term = rf.currentTerm
	reply.VoteGranted = false
	rf.mu.Unlock()
}

//
// example code to send a RequestVote RPC to a server.
// server is the index of the target server in rf.peers[].
// expects RPC arguments in args.
// fills in *reply with RPC reply, so caller should
// pass &reply.
// the types of the args and reply passed to Call() must be
// the same as the types of the arguments declared in the
// handler function (including whether they are pointers).
//
// The labrpc package simulates a lossy network, in which servers
// may be unreachable, and in which requests and replies may be lost.
// Call() sends a request and waits for a reply. If a reply arrives
// within a timeout interval, Call() returns true; otherwise
// Call() returns false. Thus Call() may not return for a while.
// A false return can be caused by a dead server, a live server that
// can't be reached, a lost request, or a lost reply.
//
// Call() is guaranteed to return (perhaps after a delay) *except* if the
// handler function on the server side does not return.  Thus there
// is no need to implement your own timeouts around Call().
//
// look at the comments in ../labrpc/labrpc.go for more details.
//
// if you're having trouble getting RPC to work, check that you've
// capitalized all field names in structs passed over RPC, and
// that the caller passes the address of the reply struct with &, not
// the struct itself.
//
func (rf *Raft) sendRequestVote(server int, args *RequestVoteArgs, reply *RequestVoteReply) bool {
	ok := rf.peers[server].Call("Raft.RequestVote", args, reply)
	return ok
}


//
// the service using Raft (e.g. a k/v server) wants to start
// agreement on the next command to be appended to Raft's log. if this
// server isn't the leader, returns false. otherwise start the
// agreement and return immediately. there is no guarantee that this
// command will ever be committed to the Raft log, since the leader
// may fail or lose an election. even if the Raft instance has been killed,
// this function should return gracefully.
//
// the first return value is the index that the command will appear at
// if it's ever committed. the second return value is the current
// term. the third return value is true if this server believes it is
// the leader.
//
func (rf *Raft) Start(command interface{}) (int, int, bool) {
	index := -1
	term := -1
	isLeader := true

	// Your code here (2B).


	return index, term, isLeader
}

//
// the tester calls Kill() when a Raft instance won't
// be needed again. you are not required to do anything
// in Kill(), but it might be convenient to (for example)
// turn off debug output from this instance.
//
func (rf *Raft) Kill() {
	// Your code here, if desired.
}

func (rf *Raft) timeElapse() {
	//rf.wg.Add(1)
loop:
	for {
		select {
		case <- rf.done:
			rf.wg.Done()
			break loop
		default:
			rf.mu.Lock()
			elapse := time.Now().UnixNano() - rf.lastHeard
			if int(elapse/int64(time.Millisecond)) >= rf.timeout {
				DPrintf("[Timeout]: peer %d timeout %dms eplased\n", rf.me, rf.timeout)
				DPrintf("[Timeout]: peer %d convert to Candidate\n", rf.me)
				rf.mu.Unlock()
				rf.transition <- true
				rf.wg.Done()
				// Todo: revert to Candidate
				go rf.candidate()
				return
			}
			rf.mu.Unlock()
			time.Sleep(time.Millisecond)
		}
	}
}

// seed rand and reset tiemout and lastHeard without lock
func (rf *Raft) resetTimeout() {
	rand.Seed(time.Now().UnixNano())
	// restart a randomized election tiemout
	rf.timeout = 160 + rand.Intn(300 - 150)
	// update the last time at which heard from the leader
	rf.lastHeard = time.Now().UnixNano()
}

// reset sync mechanism for new state transition without lock
func (rf *Raft) resetSync() {
	rf.done = make(chan struct{})
	rf.transition = make(chan bool)
	rf.wg = &sync.WaitGroup{}
	rf.exit = make(chan struct{})
}

// 由于使用goroutine并行发送RequestVote RPC，所以该调用很快就可以执行完毕，
// 一定早于选举超时时间。
func (rf *Raft) election() {
	//rf.wg.Add(1)
	rf.mu.Lock()
	// start election:
	// 	1. increase currentTerm
	rf.currentTerm += 1
	//  2. vote for self
	rf.voteFor = rf.me
	rf.nVotes = 1
	// 	3. reset election timeout
	rf.resetTimeout()
	DPrintf("[Candidate]: candidate %d start election with term %d timeout %dms\n", rf.me, rf.currentTerm, rf.timeout)
	rf.mu.Unlock()

	rf.wg.Add(1)
	go rf.timeElapse()

	// 	4. send RequestVote RPCs to all other servers
	for i, _ := range rf.peers {
		rf.mu.Lock()
		if i == rf.me {
			rf.mu.Unlock()
			continue
		}
		lastLogIndex := len(rf.log) - 1
		args := RequestVoteArgs{Term:rf.currentTerm, CandidateId:rf.me,
			LastLogIndex:lastLogIndex, LastLogTerm:rf.log[lastLogIndex].Term}

		var reply RequestVoteReply
		DPrintf("[Candidate]: candidate %d isuse ReqesutVote RPC to peer %d\n", rf.me, i)
		rf.mu.Unlock()
		// issue RequestVote RPCs in parallel to each of the other servers in the cluster
		go func(i int, rf *Raft) {

			ok := rf.sendRequestVote(i, &args, &reply)

			if ok == false {
				rf.mu.Lock()
				DPrintf("[Candidate]: candidate %d issue RequestVote PRC to peer %d failed!\n", rf.me, i)
				rf.mu.Unlock()
				return
			}

			// 发起RequestVote RPC返回false的原因有多种，可能是currentTerm较小，
			// 也可能是log不是"up-to-date"
			if reply.VoteGranted == false {

				rf.mu.Lock()
				DPrintf("[Candidate]: candidate %d is rejected by peer %d\n", rf.me, i)
				// If RPC request or response contains T > currentTerm,
				// set currentTerm = T, convert to follower
				if rf.currentTerm < reply.Term {
					DPrintf("[Candidate]: candidate %d term %d is old, convert to Follower\n", rf.me, rf.currentTerm)
					rf.currentTerm = reply.Term
					rf.mu.Unlock()
					// Todo: convert to follower
					rf.transition <- true
					go rf.follower()
				}
				rf.mu.Unlock()
				return
			}
			rf.mu.Lock()
			// 否则，ok == true，这意味着reply.Term一定等于currentTerm
			DPrintf("[Candidate]: peer %d grant vote for candidate %d\n", i, rf.me)
			if reply.Term != rf.currentTerm {
				log.Fatal("[Candidate]: RequestVote Reply ok, but reply's term != currentTerm\n")
			}
			rf.nVotes += 1
			// If votes received from majority of servers: become leader
			if rf.state != Leader && rf.nVotes > len(rf.peers) / 2 {
				rf.transition <- true
				DPrintf("[Candidate]: candidate %d wins election, convert to leader\n", rf.me)
				go rf.leader()
			}
			rf.mu.Unlock()
		}(i, rf)
	}

	rf.mu.Lock()
	DPrintf("[Candidate]: candidate %d issue RequestVote RPC finish\n", rf.me)
	rf.mu.Unlock()

	rf.wg.Done()
}

func (rf *Raft) follower() {
	<- rf.exit
	rf.mu.Lock()
	DPrintf("[Follower]: peer %d wait last state %d exit before starting\n", rf.me, rf.state)
	rf.state = Follower
	rf.resetSync()
	DPrintf("[Follower]: follower %d start up with timeout %dms\n", rf.me, rf.timeout)
	rf.wg.Add(1)
	rf.mu.Unlock()
	go rf.timeElapse()
loop:
	for {
		select {
		case <- rf.transition:
			close(rf.done)
			break loop
		}
	}
	rf.mu.Lock()
	DPrintf("[Follower]: follower %d wait for it's goroutine exit\n", rf.me)
	rf.mu.Unlock()

	rf.wg.Wait()

	rf.mu.Lock()
	DPrintf("[Follower]: follower %d exit\n", rf.me)
	rf.mu.Unlock()
	close(rf.exit)
}

func (rf *Raft) candidate() {
	<- rf.exit
	rf.mu.Lock()
	DPrintf("[Candidate]: peer %d wait for last state %d exit before starting\n", rf.me, rf.state)
	rf.state = Candidate
	rf.resetSync()
	DPrintf("[Candidate]: candidate %d start up with timeout %dms\n", rf.me, rf.timeout)
	rf.wg.Add(1)
	rf.mu.Unlock()
	go rf.election()
loop:
	for {
		select {
		case <- rf.transition:
			close(rf.done)
			break loop
		}
	}
	rf.mu.Lock()
	DPrintf("[Candidate]: candidate %d wait for it's goroutine exit\n", rf.me)
	rf.mu.Unlock()

	rf.wg.Wait()

	rf.mu.Lock()
	DPrintf("[Candidate]: candidate %d exit\n", rf.me)
	rf.mu.Unlock()

	close(rf.exit)
}

func (rf *Raft) leader() {
	<- rf.exit
	rf.mu.Lock()
	DPrintf("[Leader]: peer %d wait last state %d exit before starting\n", rf.me, rf.state)
	rf.state = Leader
	rf.resetSync()
	DPrintf("[Leader]: leader %d start up with term %d\n", rf.me, rf.currentTerm)
	for i := 0; i < len(rf.peers); i++ {
		rf.nextIndex = append(rf.nextIndex, len(rf.log))
		rf.matchIndex = append(rf.matchIndex, 0)
	}
	rf.wg.Add(1)
	rf.mu.Unlock()
	go rf.heartbeat()
loop:
	for {
		select {
		case <- rf.transition:
			close(rf.done)
			break loop
		}
	}
	rf.mu.Lock()
	DPrintf("[Leader]: leaer %d wait for it's goroutine exit\n", rf.me)
	rf.mu.Unlock()

	rf.wg.Wait()

	rf.mu.Lock()
	DPrintf("[Leader]: leader %d exit\n", rf.me)
	rf.mu.Unlock()

	close(rf.exit)
}

func (rf *Raft) heartbeat() {
	//rf.wg.Add(1)
loop:
	for {
		select {
		case <- rf.done:
			rf.wg.Done()
			break loop
		default:
			for i, _ := range rf.peers {
				rf.mu.Lock()
				if i == rf.me {
					rf.mu.Unlock()
					continue
				}
				rf.mu.Unlock()

				go func(i int, rf *Raft) {

				retry:

					rf.mu.Lock()
					prevLogIndex := rf.nextIndex[i] - 1
					prevLogTerm := rf.log[prevLogIndex].Term
					entries := rf.log[prevLogIndex+1:]
					args := AppendEntriesArgs{Term:rf.currentTerm, LeaderId:rf.me,
						PrevLogIndex:prevLogIndex, PrevLogTerm:prevLogTerm,
						Entries:entries, LeaderCommit:rf.commitIndex}
					var reply AppendEntriesReply
					DPrintf("[Leader]: leader %d issue Heartbeat to peer %d with nextIndex %d\n", rf.me, i, prevLogIndex+1)
					rf.mu.Unlock()

					ok := rf.sendAppendEntires(i, &args, &reply)

					if ok == false || reply.Success == false {
						rf.mu.Lock()
						DPrintf("[Leader]: leader %d issue Heartbeat to peer %d failed!\n", rf.me, i)
						rf.nextIndex[i] -= 1
						rf.mu.Unlock()
						goto retry
					}

					rf.mu.Lock()
					DPrintf("[Leader]: leader %d send heartbeat to peer %d success!\n", rf.me, i)
					if reply.Term != rf.currentTerm {
						log.Fatal("[Leader]: AppendEntries Reply ok, but reply's term != currentTerm\n")
					}
					rf.mu.Unlock()
				}(i, rf)
			}
			time.Sleep(110*time.Millisecond)
		}
	}
}

//
// the service or tester wants to create a Raft server. the ports
// of all the Raft servers (including this one) are in peers[]. this
// server's port is peers[me]. all the servers' peers[] arrays
// have the same order. persister is a place for this server to
// save its persistent state, and also initially holds the most
// recent saved state, if any. applyCh is a channel on which the
// tester or service expects Raft to send ApplyMsg messages.
// Make() must return quickly, so it should start goroutines
// for any long-running work.
//
func Make(peers []*labrpc.ClientEnd, me int,
	persister *Persister, applyCh chan ApplyMsg) *Raft {
	rf := &Raft{}
	rf.peers = peers
	rf.persister = persister
	rf.me = me

	// Your initialization code here (2A, 2B, 2C).

	// Part 2A
	// initialized to 0 on first boot, increases monotonically
	rf.currentTerm = 0
	rf.voteFor = -1

	rf.commitIndex = 0
	rf.lastApplied = 0
	rf.resetSync()

	// each entry of log contains command for state machine, and term
	// when entry was received by leader(**fisrt index is 1**)
	// 也就是说，log中第0个元素不算有效entry，合法entry从下标1计算。
	rf.log = make([]LogEntry, 0)
	rf.log = append(rf.log, LogEntry{Term:0})
	rf.resetTimeout()

	close(rf.exit)

	go rf.follower()


	// initialize from state persisted before a crash
	rf.readPersist(persister.ReadRaftState())


	return rf
}